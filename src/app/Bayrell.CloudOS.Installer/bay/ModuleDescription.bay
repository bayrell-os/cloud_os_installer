/*!
 *  Bayrell Cloud OS
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.CloudOS.Installer;

use Runtime.Core.Context;
use Runtime.Core.Driver;
use Runtime.Core.Entity;
use Runtime.Core.LambdaChain;
use Runtime.ORM.MySQL.Driver as MySQLDriver;
use Runtime.ORM.MySQL.Settings as MySQLSettings;
use Runtime.Web.Layout;
use Runtime.Web.LayoutModel;
use Runtime.Web.RenderController;
use Runtime.Web.RenderDriver;
use Runtime.Web.Route;
use Runtime.Web.RouteController;
use Runtime.Web.RouteList;
use Bayrell.CloudOS.Installer.Routes;


static class ModuleDescription
{

	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleName() => "Bayrell.CloudOS.Installer";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.1.0";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	pure Dict<string> requiredModules() =>
	{
		'Runtime': '>=0.3',
		'Runtime.Web': '*',
		'Runtime.Web.Auth': '*',
		
		/* Backend */
		#ifdef BACKEND then
		'Bayrell.CloudOS.Installer.Backend': '*',
		#endif
	};
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() =>
	[
		/* Register RenderController */
		new Driver
		{
			"name": "root-controller",
			"value": classof RenderController,
			"params":
			{
				"selector": "#root",
				"main_controller": true,
				"window": "RootController",
			}
		},
		
		/* Layout chain */
		new LambdaChain
		{
			"name": RenderDriver::LAYOUT_CHAIN,
			"pos": 10,
			"value": "Bayrell.CloudOS.Installer.Routes::layoutChain",
		},
		
		/* Render Chain. Page not found */
		new LambdaChain
		{
			"name": RenderDriver::RENDER_CHAIN,
			"value": "Bayrell.CloudOS.Installer.Routes::Page404",
			"pos": RenderDriver::RENDER_CHAIN_CALL_PAGE_NOT_FOUND,
			"is_async": true,
		},
		
		/* Title chain */
		new LambdaChain
		{
			"name": RenderDriver::TITLE_CHAIN,
			"value": "Bayrell.CloudOS.Installer.Routes::titleChain",
		},
		
		/* Register routes */
		new Entity{ "name": classof Routes },
		new RouteList{ "name": "Bayrell.CloudOS.Installer.MainPage" },
		
		
		#ifdef BACKEND then
		
		/* Render Chain. Pattern */
		new LambdaChain
		{
			"name": RenderDriver::RENDER_CHAIN,
			"value": "Bayrell.CloudOS.Installer.Routes::renderChainPatternDefault",
			"pos": RenderDriver::RENDER_CHAIN_RESPONSE_BEFORE,
		},
		
		/* Register MySQL Driver */
		new Driver
		{
			"name": "Runtime.ORM.DriverInterface",
			"value": classof MySQLDriver,
		},
		
		#endif
	];
	
	
	
	/**
	 * Returns context settings
	 * @return Dict<string>
	 */
	pure Dict<string> appSettings(Dict env) => 
	{
		"config":
		{
			"Runtime.Web":
			{
				/*"f_inc": (@.env("APP_MODE", "prod") == "prod") ? 1 : rtl::utime(),*/
				"f_inc": "1",
			},
			
			#ifdef BACKEND then
			
			"Runtime.Web.Auth":
			{
				"AUTH_PRIVATE_KEY": env.get("AUTH_PRIVATE_KEY", ""),
				"AUTH_PUBLIC_KEY": env.get("AUTH_PUBLIC_KEY", ""),
				"COOKIE_NAME": env.get("AUTH_COOKIE_NAME", "installer_auth_token"),
				"COOKIE_EXPIRE": 7 * 24 * 60 * 60,
			},
			
			/* Web Backend settings */
			"Runtime.Web.Backend":
			{
				"api": true,
				"external_bus_class": "",
				"external_bus_default": true,
			},
			
			/* MySQL Settings */
			"Runtime.ORM.MySQL":
			{
				"default": new MySQLSettings
				{
					"host": env.get("MYSQL_HOST", ""),
					"username": env.get("MYSQL_USERNAME", ""),
					"password": env.get("MYSQL_PASSWORD", ""),
					"db": env.get("MYSQL_DB", ""),
				},
			},
			
			#endif
		},
		
		#ifdef BACKEND then
		
		"secrets":
		{
		}
		
		#endif
	};
	
	
	
	/**
	 * Init app
	 */
	static Context appInit(Context c)
	{
		return c::init(c);
	}
	
	
	
	/**
	 * Start app
	 */
	static async Context appStart(Context c)
	{
		return await c::start(c);
	}
	
	
	
	#ifdef FRONTEND then
	
	
	/**
	 * Run app
	 */
	static async void appRun()
	{
		RenderController controller = @.getDriver(classof RouteController);
		await controller.renderFirst();
	}
	
	
	#endif	
	
}
